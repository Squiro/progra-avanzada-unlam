Programación dinámica:

La idea principal consiste en esto: 

Si hay preguntas que se repiten muchas veces en el proceso de resolución de un problema, se guardan los resultados de esas preguntas en una tabla y cada vez que la necesite voy y la busco. Se hace esto para no volver a calcular las mismas cosas. La clave de todo esto es ver qué necesita ser guardado, y esto varía con el problema en sí.

Ejemplo:

for (i = 0; i < size(vec); i++) 

El size(vec) se calcula en cada iteración del ciclo. Se puede ahorrar este cálculo guardando el valor del size en algún lado, así evitando que volvamos a calcular el tamaño ciclo por ciclo. 

--

Resolver Fibonacci con Prog. Dinamica:

Hay dos formas. 

Top-down:

vector[n] lleno de 0's y n suficientemente grande

long fibo(int n) {
	if (n <= 1)
		return n;
	if (vector[n] != 0)
		return n;

	return vector[n] = fibo(n-1) + fibo(n-2);
}

Bottom-up: 

long fibo(int n) {
	vector[0] = 1;
	vector[1] = 1;
	for (int = 2; i <= n; i++) {
		vector[i] = vector[i-1] + vector[i-2];
	}
	return vector[n];
}

--

Dada una matriz llena de numeros (enteros, positivos, negativos) encontrar la submatriz cuya suma de elementos sea maxima. La submatriz puede ser de 1 solo elemento, o de la dimension original de la matriz. 

Fuerza bruta: empiezo por una matriz 1x1 y me fijo todas las posibilidades, y veo cual es la mayor. Sigo con una de 2x2... etc. Este método es horrible porque hay muchisimas posibilidades, y hay que re-calcular constantemente. 

(Greedy algorithm: quedarse con la mejor solución)

Prog. Dinámica: armar una matriz que me acumule las sumas de las submatrices. En cada celda pongo la acumulación de la suma empezando desde el [0,0] de la matriz.